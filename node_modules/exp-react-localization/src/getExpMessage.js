// Provides centralized logic for retrieving override text from the window.
//  The ExpLabel component itself will use this to create its text node,
// but if you want to include formatted text as something other than an html/React
// element (a placeholder or alt prop, for example) you may use this directly.
// Example message object:
// {namespace: 'componentFoo', defaultMessage: 'Hello World', messageKey: 'helloWorld'}

import formatMessage from './formatMessage';

/**
 * Get a formatted, localized string
 * @param {Object} options A hash of the options
 * @param {string} [options.namespace] The namespace of the messageKey
 * @param {string} options.defaultMessage The default message to use if the key isn't found
 * @param {string} options.messageKey The key to use when looking up the localized string
 * @param {*} [options.values] A single item or array of items to be substituted into the string
 */
const getExpMessage = ({ namespace = '', defaultMessage = '', messageKey = '', values = {} }) => {
  // Try to figure out the appropriate message to use
  let result = null;
  let newNamespace = namespace;
  let newMessageKey = messageKey;

  if (window.Exp && window.Exp.localeContext) {
    if (newNamespace) {
      // Unwrap { 'namespace.secondary': { messageKey } } from { namespace: { 'secondary.key' } }
      if (!window.Exp.localeContext[newNamespace]) {
        const splitNamespace = newNamespace.split('.');

        if (splitNamespace.length > 1) {
          newNamespace = splitNamespace.shift();
          newMessageKey = [...splitNamespace, newMessageKey].join('.');
        }
      }

      // Namespaced w/ messageKey
      result = window.Exp.localeContext[newNamespace] &&
          window.Exp.localeContext[newNamespace][newMessageKey];

      // Utility for namespace.messageKey
      if (!result && window.Exp.localeContext[`${newNamespace}.${newMessageKey}`]) {
        result = window.Exp.localeContext[`${newNamespace}.${newMessageKey}`];
      }
    } else if (window.Exp.localeContext[newMessageKey]) {
      // Just messageKey
      result = window.Exp.localeContext[newMessageKey];
    }
  }

  if ((!result && localStorage.getItem('expDevmode') === 'true') ||
    localStorage.getItem('expDevmode') === 'override') {
    // Dev mode fallback to print
    result = `${newNamespace}.${newMessageKey}`;
  }

  // Default to the defaultMessage if no result was found
  result = result && typeof result === 'string' ? result : defaultMessage;

  // Format the message with the values provided
  return formatMessage(result, values);
};

export default getExpMessage;
