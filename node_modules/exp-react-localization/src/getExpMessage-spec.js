/* eslint-disable max-len */

import { expect } from 'chai';
import getExpMessage from './getExpMessage';

describe('getExpMessage', () => {
  const defaultMessage = 'default message';

  beforeEach(() => {
    window.Exp = window.Exp || {};
    window.Exp.localeContext = {
      dude: {
        abides: 'The Dude Abides',
      },
      rug: 'Really tied the room together',
      'walter.sobchak': 'Shomer shabbos!',
    };
  });

  it('should use the default message when the Exp.localeContext object is malformed', () => {
    window.Exp.localeContext = null;
    expect(getExpMessage({ defaultMessage })).to.equal(defaultMessage);

    window.Exp = null;
    expect(getExpMessage({ defaultMessage })).to.equal(defaultMessage);
  });

  it('should get messages with a namespace', () => {
    expect(getExpMessage({ namespace: 'dude', messageKey: 'abides', defaultMessage })).to.equal('The Dude Abides');
    expect(getExpMessage({ namespace: 'asdf', messageKey: 'abides', defaultMessage })).to.equal(defaultMessage);
    expect(getExpMessage({ namespace: 'rug', defaultMessage })).to.equal(defaultMessage);
    expect(getExpMessage({ namespace: 'walter', messageKey: 'sobchak', defaultMessage })).to.equal('Shomer shabbos!');
  });

  it('should get messages without a namespace', () => {
    expect(getExpMessage({ messageKey: 'rug', defaultMessage })).to.equal('Really tied the room together');
    expect(getExpMessage({ namespace: 'rug', messageKey: 'rug', defaultMessage })).to.equal(defaultMessage);
  });

  it('should return the default message when the messageKey or namespace does not exist', () => {
    expect(getExpMessage({ messageKey: 'bad', defaultMessage })).to.equal(defaultMessage);
    expect(getExpMessage({ namespace: 'bad', messageKey: 'bad', defaultMessage })).to.equal(defaultMessage);
    expect(getExpMessage({ messageKey: 'dude', defaultMessage })).to.equal(defaultMessage);
    expect(getExpMessage({ namespace: 'dude', messageKey: 'bad', defaultMessage })).to.equal(defaultMessage);
    expect(getExpMessage({ namespace: 'rug', messageKey: 'bad', defaultMessage })).to.equal(defaultMessage);
    expect(getExpMessage({ namespace: 'rug', defaultMessage })).to.equal(defaultMessage);
  });

  it('should return the an empty string the defaultMessage is not specified', () => {
    expect(getExpMessage({ messageKey: 'bad' })).to.equal('');
  });

  it('should format a message with values', () => {
    expect(getExpMessage({
      defaultMessage: 'The {0} really {1} the {2} together',
      values: ['rug', 'tied', 'room'],
    })).to.equal('The rug really tied the room together');
    expect(getExpMessage({
      defaultMessage: '{0}+{1}={3}',
      values: [1, 2, 3, 4],
    })).to.equal('1+2=4');
  });
});
