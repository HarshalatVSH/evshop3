/* eslint-disable max-len */

import { expect } from 'chai';
import formatMessage from './formatMessage';

describe('formatMessage', () => {
  it('should return the same string if nothing is passed in', () => {
    const testMessage = 'hey, {0}, hows it going?';

    expect(formatMessage(testMessage)).to.equal(testMessage);
  });

  it('should format a string given a single value', () => {
    const expected = 'hey, jimbob, hows it going?';
    const name = 'jimbob';
    const testMessage = 'hey, {0}, hows it going?';

    expect(formatMessage(testMessage, name)).to.equal(expected);

    expect(formatMessage(testMessage, [name])).to.equal(expected);

    expect(formatMessage(testMessage, [[[[[name]]]]])).to.equal(expected);
  });

  it('should format a string with numeric tokens given an array of values', () => {
    const expected = 'welcome to Weyland-Yutani! it has been 4096 days since our last "incident"';
    const testMessage = 'welcome to {0}! it has been {1} days since our last {2}';
    const values = ['Weyland-Yutani', 4096, '"incident"'];

    expect(formatMessage(testMessage, values)).to.equal(expected);

    expect(formatMessage(testMessage, [[[[values]]]])).to.equal(expected);

    // Also handle multiple values passed as additional parameters
    expect(formatMessage(testMessage, ...values)).to.equal(expected);
  });

  it('should format a string with named tokens given a hash of values', () => {
    const expected = 'welcome back, jimbob. it has been 5 days since your last visit. thanks for being such a great human being!';
    const testMessage = 'welcome back, {name}. it has been {days} days since your last visit. thanks for being such a great {noun}!';
    const values = {
      days: 5,
      name: 'jimbob',
      noun: 'human being',
    };

    expect(formatMessage(testMessage, values)).to.equal(expected);

    expect(formatMessage(testMessage, [[[[values]]]])).to.equal(expected);
  });
});
